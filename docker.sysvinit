#!/bin/sh
#
# docker
#
# chkconfig: - 80 05
# description: docker
#

### BEGIN INIT INFO
# Provides:           docker
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  Docker is an open-source project to easily create lightweight, portable,
#  self-sufficient containers from any application. The same container that a
#  developer builds and tests on a laptop can run at scale, in production, on
#  VMs, bare metal, OpenStack clusters, public clouds and more.
### END INIT INFO

BASE=$(basename $0)
DOCKER=/bin/$BASE
DOCKER_PIDFILE=/var/run/$BASE.pid
DOCKER_OPTS=

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

# Get lsb functions
. /lib/lsb/init-functions
. /etc/rc.d/init.d/functions

# Check docker is present
if [ ! -x $DOCKER ]; then
  log_failure_msg "$DOCKER not present or not executable"
  exit 1
fi

fail_unless_root() {
  if [ "$(id -u)" != '0' ]; then
    log_failure_msg "Docker must be run as root"
    exit 1
  fi
}

case "$1" in
  start)
    fail_unless_root
    printf "Starting Docker: $BASE\n"
    mount | grep cgroup >/dev/null || \
      mount -t cgroup none /sys/fs/cgroup 2>/dev/null
    daemon --check nohup /bin/docker -d -g=/mnt/ephemeral0/docker -p=$DOCKER_PIDFILE > /var/log/docker.log 2>&1 &
    RETVAL=$?
    printf "%s\n" "$RETVAL"
    ;;

  stop)
    printf "Stopping Docker: $BASE\n"
    if [ -f $DOCKER_PIDFILE ]; then
      kill "$(cat $DOCKER_PIDFILE)"
    fi
    RETVAL=$?
    printf "%s\n" "$RETVAL"
    ;;

  restart)
    fail_unless_root
    kill "$(cat $DOCKER_PIDFILE)"
    daemon --check nohup /bin/docker -d -g=/mnt/ephemeral0/docker -p=$DOCKER_PIDFILE > /var/log/docker.log 2>&1 &
    ;;

  status)
    status -p "$DOCKER_PIDFILE" "$BASE"
    ;;

  *)
    printf "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit $RETVAL
